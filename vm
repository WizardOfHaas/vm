#!/usr/bin/perl

use warnings;
use strict;

my $ip = 0;

my @regs = (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
my @flags = (0,0,0,0);

my @mem = ((0) x 64);

my @jmp_stack;

open CODE, '<', $ARGV[0];
binmode(CODE);
my @code;
while(<CODE>)
{
    push(@code, unpack('C*', $_));
}

while($ip <= $#code)
{
    my @in = ($code[$ip], $code[$ip+1], $code[$ip+2], $code[$ip+3]);
    print 'ins:'.join('|', @in)."\n";
    
    if($in[0] == ord('=')){#mov
	&op(\&mov, @in);
    }elsif($in[0] == ord('+')){#add
	&op(\&add, @in);
    }elsif($in[0] == ord('-')){#sub
	&op(\&dif, @in);
    }elsif($in[0] == ord('?')){#cmp
	&cmp(@in);
    }elsif($in[0] == ord('>')){#push
	&push(@in);
    }elsif($in[0] == ord('<')){#pop
	&pop(@in);
    }elsif($in[0] == ord('^')){#jmp
	&jmp(@in);
    }
    
    print 'reg:'.join("|", @regs)."\n";
    print 'flg:'.join("|", @flags)."\n";
    print 'mem:'.join("|", @mem)."\n\n";

    $ip += 4;
}

sub op
{
    my @in;
    (my $code, $in[0], $in[1], $in[2], $in[3]) = @_;
    
    if($in[1] == 0){ #reg = num #case 0
	$regs[$in[2]] = $code->($regs[$in[2]], $in[3]); # mov r0, 5
    }elsif($in[1] == 1){ #mem = num #case 1
	$mem[$in[2]] = $code->($mem[$in[2]], $in[3]); # mov [0x100], 5
    }elsif($in[1] == 2){ #reg = mem #case 2
	$regs[$in[2]] = $code->($regs[$in[2]], $mem[$in[3]]); # mov r0, [0x100]
    }elsif($in[1] == 3){ #reg = reg #case 3
	$regs[$in[2]] = $code->($regs[$in[2]], $regs[$in[3]]); # mov r0, r1
    }elsif($in[1] == 4){ #mem = reg #case 4
	$mem[$in[2]] = $code->($mem[$in[2]], $regs[$in[3]]); # mov [0x100], r1
    }elsif($in[1] == 5){ #mem@reg pointer = num #case 5
	$mem[$regs[$in[2]]] = $code->($mem[$regs[$in[2]]], $in[3]); # mov [r1], 5
    }elsif($in[1] == 6){ #mem@reg pointer = reg #casr 6
	$mem[$regs[$in[2]]] = $code->($mem[$regs[$in[2]]], $regs[$in[3]]); # mov [r0], r1
    }elsif($in[1] == 7){ #reg = mem@reg pointer #case 7
	$regs[$in[2]] = $code->($regs[$in[2]], $mem[$regs[$in[3]]]); # mov r0, [r1]
    }
}

sub cmp
{
    my @in = @_;

    if($in[1] == 0){ #cmp reg num  #case 0
	if($regs[$in[2]] == $in[3]){ # cmp r0, 5
	    $flags[0] = 1;
	}elsif($regs[$in[2]] <= $in[3]){
	    $flags[0] = 2;
	}elsif($regs[$in[2]] >= $in[3]){
	    $flags[0] = 3;
	}
    }elsif($in[1] == 1){ #mem = num #case 1	
	if($mem[$in[2]] == $in[3]){ # cmp [0x100], 5
	    $flags[0] = 1;
	}elsif($mem[$in[2]] <= $in[3]){
	    $flags[0] = 2;
	}elsif($mem[$in[2]] >= $in[3]){
	    $flags[0] = 3;
	}
    }elsif($in[1] == 2){ #reg = mem #case 2
	if($regs[$in[2]] == $mem[$in[3]]){ # cmp r0, [0x100]
	    $flags[0] = 1;
	}elsif($regs[$in[2]] <= $mem[$in[3]]){
	    $flags[0] = 2;
	}elsif($regs[$in[2]] >= $mem[$in[3]]){
	    $flags[0] = 3;
	}
    }elsif($in[1] == 3){ #reg = reg #case 3
	if($regs[$in[2]] == $regs[$in[3]]){ # cmp r0, r1
	    $flags[0] = 1;
	}elsif($regs[$in[2]] <= $regs[$in[3]]){
	    $flags[0] = 2;
	}elsif($regs[$in[2]] >= $regs [$in[3]]){
	    $flags[0] = 3;
	}
    }elsif($in[1] == 4){ #mem = reg #case 4
	if($mem[$in[2]] == $regs[$in[3]]){ # cmp [0x100], r1
	    $flags[0] = 1;
	}elsif($mem[$in[2]] <= $regs[$in[3]]){
	    $flags[0] = 2;
	}elsif($mem[$in[2]] >= $regs[$in[3]]){
	    $flags[0] = 3;
	}
    }elsif($in[1] == 5){ #mem@reg pointer = num #case 5
	if($mem[$regs[$in[2]]] == $in[3]){ # cmp [r1], 5
	    $flags[0] = 1;
	}elsif($mem[$regs[$in[2]]] <= $in[3]){
	    $flags[0] = 2;
	}elsif($mem[$regs[$in[2]]] >= $in[3]){
	    $flags[0] = 3;
	}
    }elsif($in[1] == 6){ #mem@reg pointer = reg #casr 6
	if($mem[$regs[$in[2]]] == $regs[$in[3]]){ # cmp [r0], r1
	    $flags[0] = 1;
	}elsif($mem[$regs[$in[2]]] <= $regs[$in[3]]){
	    $flags[0] = 2;
	}elsif($mem[$regs[$in[2]]] >= $regs[$in[3]]){
	    $flags[0] = 3;
	}
    }elsif($in[1] == 7){ #reg = mem@reg pointer #case 7
	if($regs[$in[2]] == $mem[$regs[$in[3]]]){ # cmp r0, [r1]
	    $flags[0] = 1;
	}elsif($regs[$in[2]] <= $mem[$regs[$in[3]]]){
	    $flags[0] = 2;
	}elsif($regs[$in[2]] >= $mem[$regs[$in[3]]]){
	    $flags[0] = 3;
	}
    }    
}

sub jmp
{
    my @in = @_;

    if($in[1] == 0){
	&jmp_conds($in[2], $in[3]); # jmp 5
    }elsif($in[1] == 1){
	&jmp_cond($in[2], $regs[$in[3]]); # jmp r0
    }elsif($in[1] == 2){
	&jmp_cond($in[2], $mem[$regs[$in[3]]]); # jmp [r0]
    }elsif($in[1] == 3){
	&jmp_cond($in[2], $mem[$in[3]]); #jmp [5]
    }
}

sub jmp_cond
{
}

sub push
{
    my @in = @_;
    $regs[15]++;
    
    if($in[1] == 0){
	$mem[$regs[15]] = $in[2];
    }elsif($in[1] == 1){
	$mem[$regs[15]] = $regs[$in[2]];
    }elsif($in[1] == 2){
	$mem[$regs[15]] = $mem[$regs[$in[2]]];
    }elsif($in[1] == 3){
	$mem[$regs[15]] == $mem[$in[2]];
	#Not working 100%?
    }
}

sub pop
{
    my @in = @_;

    if($in[1] == 1){
	$regs[$in[2]] = $mem[$regs[15]];
    }elsif($in[1] == 2){
	$mem[$regs[$in[2]]] = $mem[$regs[15]];
    }elsif($in[1] == 3){
	$mem[$in[2]] = $mem[$regs[15]];
    }

    $regs[15]--;
}

sub mov
{
    my ($a, $b) = @_;

    return $b;
}

sub add
{
    my ($a, $b) = @_;

    return $a + $b;
}

sub dif
{
    my ($a, $b) = @_;

    return $a - $b;
}
